# ================= Libraries and Includes ====================================

DATASTRUCT_INCLUDE_DIR = ./include/DataStruct/include
INOUT_INCLUDE_DIR = ./include/InOut/include
METRIC_INCLUDE_DIR = ./include/Metrics/include
CURV_INCLUDE_DIR = ./include/Curvature/include
OT1_INCLUDE_DIR = ./include/OT1/include
PH0_INCLUDE_DIR = ./include/PH0/include
NANOGUI_INCLUDE_DIR = ./nanogui/include
HERA_INCLUDE_DIR = ./ext/hera/include
BOOST_INCLUDE_DIR = /opt/homebrew/Cellar/boost/1.81.0_1/include

BLAS_LIBS = -lblas -llapack
THREAD_LIBS = -lpthread

# ================= Project Directories ====================================

INC_DIR = ./include
SRC_DIR = ./src
OBJ_DIR = ./src
BIN_DIR = ./bin
EXEC_DIR = ./exec

# ================= Project Name ===========================================

EXT=
NAME1=test
NAMEOBJ1=$(EXEC_DIR)/$(NAME1).cpp
NAMEBIN1=$(BIN_DIR)/$(NAME1)$(EXT)
NAME2=2DShape
NAMEOBJ2=$(EXEC_DIR)/$(NAME2).cpp
NAMEBIN2=$(BIN_DIR)/$(NAME2)$(EXT)


# ================= Compilers and Flags ====================================

CC 		:= gcc
CFLAGS		:= -c -O3 -ansi -Wall -Werror -pedantic
CPP		:= g++
CPPFLAGS	:= -std=c++17 -Wall -v#-std=c++17 -O3 -Wdeprecated-declarations -Wuninitialized -ansi -Wall -std=c++0x

INCLUDE_DIRS = -I$(INC_DIR) -I$(DATASTRUCT_INCLUDE_DIR) -I$(INOUT_INCLUDE_DIR)\
		-I$(METRIC_INCLUDE_DIR) -I$(CURV_INCLUDE_DIR) -I$(OT1_INCLUDE_DIR) -I$(PH0_INCLUDE_DIR) -I$(NANOGUI_INCLUDE_DIR) -I$(HERA_INCLUDE_DIR) -I$(BOOST_INCLUDE_DIR)

LIB_DIRS =

LIBS = $(BLAS_LIBS) $(THREAD_LIBS) -lstdc++

LOAD_LIB_PATH =

LD_FLAGS = -O3

# ================= Pattern rules ==========================================

$(OBJ_DIR)/%.o: $(SRC_DIR)/%.cpp
	$(CPP) $(CPPFLAGS) $(INCLUDE_DIRS) $< -o $@

$(OBJ_DIR)/%.o: $(SRC_DIR)/%.c
	$(CC) $(CFLAGS) $(INCLUDE_DIRS) $< -o $@

$(F_OBJ_DIR)/%.o: $(F_SRC_DIR)/%.f
	$(FC) $(FFLAGS) $< -o $@

# ================= Compile source code ====================================

OBJECTS1 = \
$(NAMEOBJ1)

OBJECTS2 = \
$(NAMEOBJ2)



# ================= Generate Executable ====================================

$(NAMEBIN1) : $(OBJECTS1)
	$(CPP) -o $(NAMEBIN1) $(LD_FLAGS) $(OBJECTS1) $(LIB_DIRS) $(LIBS) $(LOAD_LIB_PATH)

$(NAMEBIN2) : $(OBJECTS2)
	$(CPP) -o $(NAMEBIN2) $(LD_FLAGS) $(OBJECTS2) $(LIB_DIRS) $(LIBS) $(LOAD_LIB_PATH)


all: $(OBJECTS1) $(OBJECTS2)
	$(CPP) $(CPPFLAGS) -o $(NAMEBIN1) $(LD_FLAGS) $(OBJECTS1) $(LIB_DIRS) $(LIBS) $(LOAD_LIB_PATH)
	$(CPP) $(CPPFLAGS) -o $(NAMEBIN2) $(LD_FLAGS) $(OBJECTS2) $(LIB_DIRS) $(LIBS) $(LOAD_LIB_PATH)

clean:
	touch $(OBJ_DIR)/junk.o; rm -f $(OBJ_DIR)/*.o $(NAMEBIN1) $(NAMEBIN2) $(NAMEBIN3)

2DShape: 
	$(CPP) $(CPPFLAGS) -o $(NAMEBIN2) $(LD_FLAGS) $(OBJECTS2) $(LIB_DIRS) $(LIBS) $(LOAD_LIB_PATH) $(INCLUDE_DIRS)
test: 
	$(CPP) $(CPPFLAGS) -o $(NAMEBIN1) $(LD_FLAGS) $(OBJECTS1) $(LIB_DIRS) $(LIBS) $(LOAD_LIB_PATH) $(INCLUDE_DIRS)

$(OBJECTS1):
$(OBJECTS2):


